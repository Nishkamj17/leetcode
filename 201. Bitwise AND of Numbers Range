class Solution {
public:
    int msbPos(int num)
    {
        int msbp = -1;
        
        while(num)
        {
            num = num >> 1;
            msbp++;
        }
        return msbp;
    }
    
    int rangeBitwiseAnd(int m, int n) {
        while(m < n){ 
            // -b is the 2's complement of b when do bitwise or with b  
            //we get LSB and we subtract that from b 
            n -= (n & -n); 
        } 
        return n; 
        
//         int result = 0;
        
//         while(m && n)
//         {
//             int msbp1 = msbPos(m);
//             int msbp2 = msbPos(n);
            
//             if (msbp1 != msbp2)
//                 return result;
            
//             int msbVal = (1 << msbp1);
//                 result += msbp1;
            
//             m -= msbp1;
//             n -= msbp2;
//         }
        
//         return result;
    }
};
