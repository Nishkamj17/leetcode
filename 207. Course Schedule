class Solution {
public:
    
    bool dfs(vector<set<int>> &adj, vector<int> &visited, int v)
    {
        if (visited[v] == 1)
            return true;
        
        visited[v] = -1;
        for(auto it = adj[v].begin(); it != adj[v].end(); it++)
        {
            if (visited[*it] == -1 || !dfs(adj, visited, *it))
                return false;
        }
        visited[v] = 1;
        return true;
    }
    
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<set<int>> adj(numCourses);
        vector<int> visited(numCourses, 0);
        
        
        for(int i = 0; i < prerequisites.size(); i++)
        {
            adj[prerequisites[i][1]].insert(prerequisites[i][0]);
        }
        
        for(int i = 0; i < numCourses; i++)
        {
            if (!dfs(adj, visited, i))
                return false;
        }
        return true;
    }
};
