2 Solution :-

---------------------------
1st Solution:
Using Binary Search
Time = O(log(min(n, m)))
space = O(1)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if (nums1.size() > nums2.size())
            return findMedianSortedArrays(nums2, nums1);
        
        int x = nums1.size();
        int y = nums2.size();
        double ans = 0;
        
        int low = 0;
        int high = x;
        
        while(low <= high)
        {
            int partX = (low+high)/2;
            int partY = (x+y+1)/2 - partX;
            
            int maxLeftX = (partX == 0 ? INT_MIN : nums1[partX-1]);
            int minRightX = (partX == x ? INT_MAX : nums1[partX]);
            
            int maxLeftY = (partY == 0 ? INT_MIN : nums2[partY-1]);
            int minRightY = (partY == y ? INT_MAX : nums2[partY]);
            
            if (maxLeftX <= minRightY && maxLeftY <= minRightX)
            {
                if ((x+y)%2 == 0)
                {
                    ans = (double)(max(maxLeftX, maxLeftY) + min(minRightX, minRightY))/2;
                    break;
                }
                else
                {
                    ans = (double)max(maxLeftX, maxLeftY);
                    break;
                }
            }
            else if (maxLeftX > minRightY)
            {
                high = partX-1;
            }
            else
            {
                low = partX+1;
            }
        }
        return ans;
    }
};
------------------

------------------
2nd Solution:
Brute Force
Time - O(m+n)
Space - O(m+n)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> merged(nums1.size()+nums2.size(), 0);
        
        int i = 0, j = 0, k = 0;
        while(i < nums1.size() && j < nums2.size())
        {
            if (nums1[i] < nums2[j])
            {
                merged[k++] = nums1[i++];
            }
            else
            {
                merged[k++] = nums2[j++];
            }
        }
        
        while(i < nums1.size())
            merged[k++] = nums1[i++];
        
        while(j < nums2.size())
            merged[k++] = nums2[j++];
        
        int mid = (merged.size()-1)/2;

        return merged.size() % 2 == 0 ? (double)(merged[mid]+merged[mid+1])/2 : (double)merged[mid];
    }
};
-------------------
